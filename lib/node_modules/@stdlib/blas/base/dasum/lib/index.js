/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* BLAS level 1 routine to compute the sum of absolute values.
*
* @module @stdlib/blas/base/dasum
*
* @example
* var dasum = require( '@stdlib/blas/base/dasum' );
*
* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
*
* var s = dasum( x.length, x, 1 );
* // returns 15.0
*
* @example
* // Use the `ndarray` interface...
* var dasum = require( '@stdlib/blas/base/dasum' ).ndarray;
*
* var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
*
* var s = dasum( x.length, x, 1, 0 );
* // returns 15.0
*
* @example
* var factory = require( '@stdlib/blas/base/dasum' ).wasm;
*
* // Create a new WASM instance:
* var wasm = factory();
*
* // Number of data elements:
* var N = 5;
*
* // Allocate space on the heap:
* var bytes = wasm.malloc( N * 8 ); // 8 bytes per double
*
* // Create a Float64Array view:
* var view = new Float64Array( bytes.buffer, bytes.byteOffset, N );
*
* // Copy data to the heap:
* view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );
*
* // Compute the sum of absolute values:
* var s = dasum( N, bytes, 1 );
* // returns 15.0
*
* // Free the memory:
* wasm.free( bytes );
*/

// MODULES //

var join = require( 'path' ).join;
var tryRequire = require( '@stdlib/utils/try-require' );
var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var wasm = require( './wasm.js' );


// MAIN //

var dasum = tryRequire( join( __dirname, './native.js' ) );
if ( dasum instanceof Error ) {
	dasum = require( './main.js' );
}
setReadOnly( dasum, 'wasm', wasm );


// EXPORTS //

module.exports = dasum;
