#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var build = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	opts = {
		'packages': {},
		'tests': {},
		'benchmarks': {}
	};
	if ( flags.dir ) {
		opts.dir = flags.dir;
	}
	if ( flags.readme ) {
		opts.readme = flags.readme;
	}
	if ( flags.index ) {
		opts.index = flags.index;
	}
	if ( flags.mount ) {
		opts.mount = flags.mount;
	}
	if ( flags[ 'packages-pattern' ] ) {
		opts.packages.pattern = flags[ 'packages-pattern' ];
	}
	if ( flags[ 'packages-ignore' ] ) {
		opts.packages.ignore = flags[ 'packages-ignore' ];
		if ( typeof opts.packages.ignore === 'string' ) {
			opts.packages.ignore = [ opts.packages.ignore ];
		}
	}
	if ( flags[ 'tests-pattern' ] ) {
		opts.tests.pattern = flags[ 'tests-pattern' ];
	}
	if ( flags[ 'tests-folder' ] ) {
		opts.tests.folder = flags[ 'tests-folder' ];
	}
	if ( flags[ 'tests-bundle' ] ) {
		opts.tests.bundle = flags[ 'tests-bundle' ];
	}
	if ( flags[ 'tests-html' ] ) {
		opts.tests.html = flags[ 'tests-html' ];
	}
	if ( flags[ 'benchmarks-pattern' ] ) {
		opts.benchmarks.pattern = flags[ 'benchmarks-pattern' ];
	}
	if ( flags[ 'benchmarks-folder' ] ) {
		opts.benchmarks.folder = flags[ 'benchmarks-folder' ];
	}
	if ( flags[ 'benchmarks-bundle' ] ) {
		opts.benchmarks.bundle = flags[ 'benchmarks-bundle' ];
	}
	if ( flags[ 'benchmarks-html' ] ) {
		opts.benchmarks.html = flags[ 'benchmarks-html' ];
	}

	build( flags.out, opts, clbk );

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function clbk( error ) {
		if ( error ) {
			return cli.error( error );
		}
	}
}

main();
