/*
* @license Apache-2.0
*
* Copyright (c) {{YEAR}} {{COPYRIGHT}}.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/**
* Returns an accessed value.
*
* @returns accessed value
*/
type Nullary<V> = ( this: V ) => number | void;

/**
* Returns an accessed value.
*
* @param value - array element
* @returns accessed value
*/
type Unary<T, V> = ( this: V, value: T ) => number | void;

/**
* Returns an accessed value.
*
* @param value - array element
* @param idx - iteration index
* @returns accessed value
*/
type Binary<T, V> = ( this: V, value: T, idx: number ) => number | void;

/**
* Returns an accessed value.
*
* @param value - array element
* @param idx - iteration index
* @param indices - strided indices (offset + idx*stride)
* @returns accessed value
*/
type Ternary<T, V> = ( this: V, value: T, idx: number, indices: Array<number> ) => number | void;

/**
* Returns an accessed value.
*
* @param value - array element
* @param idx - iteration index
* @param indices - strided indices (offset + idx*stride)
* @param arrays - input and output arrays
* @returns accessed value
*/
type Quaternary<T, V> = ( this: V, value: T, idx: number, indices: Array<number>, arrays: [ {{TYPED_ARRAY_CTOR}}, {{TYPED_ARRAY_CTOR}} ] ) => number | void;

/**
* Returns an accessed value.
*
* @param value - array element
* @param idx - iteration index
* @param indices - strided indices (offset + idx*stride)
* @param arrays - input and output arrays
* @returns accessed value
*/
type Callback<T, V> = Nullary<V> | Unary<T, V> | Binary<T, V> | Ternary<T, V> | Quaternary<T, V>;

/**
* Interface describing `{{ALIAS}}`.
*/
interface Routine {
	/**
	* {{MAIN_DESC}}
	*
	* @param N - number of indexed elements
	* @param x - input array
	* @param strideX - `x` stride length
	* @param y - destination array
	* @param strideY - `y` stride length
	* @param clbk - callback function
	* @param thisArg - callback execution context
	* @returns destination array
	*
	* @example
	* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
	*
	* function accessor( v ) {
	*     return v;
	* }
	*
	* var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
	* var out = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	*
	* {{ALIAS}}( x.length, x, 1, out, 1, accessor );
	* // out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
	*/
	<T = unknown>( N: number, x: {{TYPED_ARRAY_CTOR}}, strideX: number, y: {{TYPED_ARRAY_CTOR}}, strideY: number, clbk: Callback<number, T>, thisArg?: ThisParameterType<Callback<number, T>> ): {{TYPED_ARRAY_CTOR}};

	/**
	* {{NDARRAY_DESC}}
	*
	* @param N - number of indexed elements
	* @param x - input array
	* @param strideX - `x` stride length
	* @param offsetX - starting index for `x`
	* @param y - destination array
	* @param strideY - `y` stride length
	* @param offsetY - starting index for `y`
	* @param clbk - callback function
	* @param thisArg - callback execution context
	* @returns destination array
	*
	* @example
	* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
	*
	* function accessor( v ) {
	*     return v;
	* }
	*
	* var x = {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
	* var out = {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	*
	* {{ALIAS}}.ndarray( x.length, x, 1, 0, out, 1, 0, accessor );
	* // out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
	*/
	ndarray<T = unknown>( N: number, x: {{TYPED_ARRAY_CTOR}}, strideX: number, offsetX: number, y: {{TYPED_ARRAY_CTOR}}, strideY: number, offsetY: number, clbk: Callback<number, T>, thisArg?: ThisParameterType<Callback<number, T>> ): {{TYPED_ARRAY_CTOR}};
}

/**
* {{MAIN_DESC}}
*
* @param N - number of indexed elements
* @param x - input array
* @param strideX - `x` stride length
* @param y - destination array
* @param strideY - `y` stride length
* @param clbk - callback function
* @param thisArg - callback execution context
* @returns destination array
*
* @example
* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
*
* function accessor( v ) {
*     return v;
* }
*
* var x = {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
* var out = {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* {{ALIAS}}( x.length, x, 1, out, 1, accessor );
* // out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
*
* @example
* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
*
* function accessor( v ) {
*     return v;
* }
*
* var x = {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
* var out = {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* {{ALIAS}}.ndarray( x.length, x, 1, 0, out, 1, 0, accessor );
* // out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
*/
declare var {{ALIAS}}: Routine;


// EXPORTS //

export = {{ALIAS}};
