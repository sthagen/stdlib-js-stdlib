{
  "arcsine": {
    "alias": "arcsine",
    "pkg": "stdlib/random/array/arcsine",
    "base_pkg": "stdlib/random/base/arcsine",

    "param_1": "a",
    "param_1_value": "2.0",
    "param_1_desc": "minimum support",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "number",
    "param_1_throws_desc": "must be a number",

    "param_2": "b",
    "param_2_value": "5.0",
    "param_2_desc": "maximum support",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "number",
    "param_2_throws_desc": "must be a number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "an arcsine distribution",
    "readme_from_desc": "an [arcsine][@stdlib/random/base/arcsine] distribution",

    "readme_heading": "Arcsine Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from an arcsine distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from an arcsine distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from an arcsine distribution.",

    "repl_text_param_1_desc": "Minimum support.",
    "repl_text_param_2_desc": "Maximum support.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "arcsine,continuous"
  },
  "beta": {
    "alias": "beta",
    "pkg": "stdlib/random/array/beta",
    "base_pkg": "stdlib/random/base/beta",

    "param_1": "alpha",
    "param_1_value": "2.0",
    "param_1_desc": "first shape parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "param_2": "beta",
    "param_2_value": "5.0",
    "param_2_desc": "second shape parameter",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "PositiveNumber",
    "param_2_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a beta distribution",
    "readme_from_desc": "a [beta][@stdlib/random/base/beta] distribution",

    "readme_heading": "Beta Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a beta distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a beta distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a beta distribution.",

    "repl_text_param_1_desc": "First shape parameter.",
    "repl_text_param_2_desc": "Second shape parameter.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "beta,continuous"
  },
  "betaprime": {
    "alias": "betaprime",
    "pkg": "stdlib/random/array/betaprime",
    "base_pkg": "stdlib/random/base/betaprime",

    "param_1": "alpha",
    "param_1_value": "2.0",
    "param_1_desc": "first shape parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "param_2": "beta",
    "param_2_value": "5.0",
    "param_2_desc": "second shape parameter",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "PositiveNumber",
    "param_2_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a beta prime distribution",
    "readme_from_desc": "a [beta prime][@stdlib/random/base/betaprime] distribution",

    "readme_heading": "Beta Prime Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a beta prime distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a beta prime distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a beta prime distribution.",

    "repl_text_param_1_desc": "First shape parameter.",
    "repl_text_param_2_desc": "Second shape parameter.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "betaprime,continuous"
  },
  "cosine": {
    "alias": "cosine",
    "pkg": "stdlib/random/array/cosine",
    "base_pkg": "stdlib/random/base/cosine",

    "param_1": "mu",
    "param_1_value": "2.0",
    "param_1_desc": "mean",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "number",
    "param_1_throws_desc": "must be a number",

    "param_2": "s",
    "param_2_value": "5.0",
    "param_2_desc": "scale parameter",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "PositiveNumber",
    "param_2_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a cosine distribution",
    "readme_from_desc": "a [cosine][@stdlib/random/base/cosine] distribution",

    "readme_heading": "Cosine Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a cosine distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a cosine distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a cosine distribution.",

    "repl_text_param_1_desc": "Mean.",
    "repl_text_param_2_desc": "Scale parameter.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "cosine,raised,continuous"
  },
  "gamma": {
    "alias": "gamma",
    "pkg": "stdlib/random/array/gamma",
    "base_pkg": "stdlib/random/base/gamma",

    "param_1": "alpha",
    "param_1_value": "2.0",
    "param_1_desc": "shape parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "param_2": "beta",
    "param_2_value": "5.0",
    "param_2_desc": "rate parameter",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "PositiveNumber",
    "param_2_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a gamma distribution",
    "readme_from_desc": "a [gamma][@stdlib/random/base/gamma] distribution",

    "readme_heading": "Gamma Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a gamma distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a gamma distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a gamma distribution.",

    "repl_text_param_1_desc": "Shape parameter.",
    "repl_text_param_2_desc": "Rate parameter.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "gamma,continuous"
  },
  "invgamma": {
    "alias": "invgamma",
    "pkg": "stdlib/random/array/invgamma",
    "base_pkg": "stdlib/random/base/invgamma",

    "param_1": "alpha",
    "param_1_value": "2.0",
    "param_1_desc": "shape parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "param_2": "beta",
    "param_2_value": "5.0",
    "param_2_desc": "scale parameter",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "PositiveNumber",
    "param_2_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "an inverse gamma distribution",
    "readme_from_desc": "a [inverse gamma][@stdlib/random/base/invgamma] distribution",

    "readme_heading": "Inverse Gamma Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from an inverse gamma distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from an inverse gamma distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from an inverse gamma distribution.",

    "repl_text_param_1_desc": "Shape parameter.",
    "repl_text_param_2_desc": "Scale parameter.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "inverse,gamma,inverse-gamma,continuous"
  },
  "lognormal": {
    "alias": "lognormal",
    "pkg": "stdlib/random/array/lognormal",
    "base_pkg": "stdlib/random/base/lognormal",

    "param_1": "mu",
    "param_1_value": "2.0",
    "param_1_desc": "location parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "number",
    "param_1_throws_desc": "must be a number",

    "param_2": "sigma",
    "param_2_value": "5.0",
    "param_2_desc": "scale parameter",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "PositiveNumber",
    "param_2_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a lognormal distribution",
    "readme_from_desc": "a [lognormal][@stdlib/random/base/lognormal] distribution",

    "readme_heading": "Lognormal Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a lognormal distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a lognormal distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a lognormal distribution.",

    "repl_text_param_1_desc": "Location parameter.",
    "repl_text_param_2_desc": "Scale parameter.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "normal,lognormal,log-normal,gaussian,continuous"
  },
  "normal": {
    "alias": "normal",
    "pkg": "stdlib/random/array/normal",
    "base_pkg": "stdlib/random/base/normal",

    "param_1": "mu",
    "param_1_value": "2.0",
    "param_1_desc": "mean",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "number",
    "param_1_throws_desc": "must be a number",

    "param_2": "sigma",
    "param_2_value": "5.0",
    "param_2_desc": "standard deviation",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "PositiveNumber",
    "param_2_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a normal distribution",
    "readme_from_desc": "a [normal][@stdlib/random/base/normal] distribution",

    "readme_heading": "Normal Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a normal distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a normal distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a normal distribution.",

    "repl_text_param_1_desc": "Mean.",
    "repl_text_param_2_desc": "Standard deviation.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "normal,gaussian,continuous"
  },
  "uniform": {
    "alias": "uniform",
    "pkg": "stdlib/random/array/uniform",
    "base_pkg": "stdlib/random/base/uniform",

    "param_1": "a",
    "param_1_value": "2.0",
    "param_1_desc": "minimum support",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "number",
    "param_1_throws_desc": "must be a number",

    "param_2": "b",
    "param_2_value": "5.0",
    "param_2_desc": "maximum support",
    "param_2_dtype": "number",
    "param_2_jsdoc_dtype": "number",
    "param_2_throws_desc": "must be a number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a continuous uniform distribution",
    "readme_from_desc": "a [continuous uniform][@stdlib/random/base/uniform] distribution",

    "readme_heading": "Uniform Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a continuous uniform distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a continuous uniform distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a continuous uniform distribution.",

    "repl_text_param_1_desc": "Minimum support.",
    "repl_text_param_2_desc": "Maximum support.",

    "repl_text_output_typed_arrays": "Float64Array|Float32Array",

    "keywords": "uniform,continuous"
  }
}
