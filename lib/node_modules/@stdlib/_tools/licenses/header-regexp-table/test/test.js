/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var objectKeys = require( '@stdlib/utils/keys' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isRegExp = require( '@stdlib/assert/is-regexp' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var createTable = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': IS_BROWSER
};
var LANGS = [
	'AWK',
	'awk',
	'C',
	'c',
	'C++',
	'cpp',
	'CSS',
	'css',
	'Fortran',
	'fortran',
	'f',
	'GYP',
	'gyp',
	'GYPI',
	'gypi',
	'h',
	'hpp',
	'HTML',
	'html',
	'INI',
	'ini',
	'Julia',
	'julia',
	'jl',
	'JavaScript',
	'javascript',
	'js',
	'Markdown',
	'markdown',
	'md',
	'mdown',
	'Makefile',
	'makefile',
	'mk',
	'make',
	'Python',
	'python',
	'py',
	'R',
	'r',
	'shell',
	'sh',
	'bash',
	'text',
	'txt',
	'wat',
	'WAT',
	'YAML',
	'yaml',
	'yml'
];
var FIXTURES = {
	'file.awk.txt': 'awk',
	'file.bash.txt': 'bash',
	'file.c.txt': 'c',
	'file.cpp.txt': 'cpp',
	'file.css.txt': 'css',
	'file.f.txt': 'fortran',
	'file.gyp.txt': 'gyp',
	'file.gypi.txt': 'gypi',
	'file.h.txt': 'h',
	'file.html.txt': 'html',
	'file.ini.txt': 'ini',
	'file.js.txt': 'javascript',
	'file.julia.txt': 'julia',
	'file.md.txt': 'markdown',
	'file.node.txt': 'javascript',
	'file.py.txt': 'python',
	'file.r.txt': 'r',
	'file.txt.txt': 'txt',
	'file.wat.txt': 'wat',
	'file.yml.txt': 'yaml'
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof createTable, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a supported SPDX license identifier', opts, function test( t ) {
	var values;
	var i;

	values = [
		'5',
		'apache',
		'apache 2.0',
		'apache-2.0',
		'mit',
		'isc',
		'unlicense',
		'cc0',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createTable( value, [ 'js' ] );
		};
	}
});

tape( 'the function throws an error if not provided a second argument which is an array', opts, function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createTable( 'Apache-2.0', value );
		};
	}
});

tape( 'the function throws an error if not provided a valid file type', opts, function test( t ) {
	var values;
	var i;

	values = [
		[ 'js', null ],
		[ 'js', false ],
		[ 'js', void 0 ],
		[ 'f', 'js', [], 'yml' ]
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createTable( 'Apache-2.0', value );
		};
	}
});

tape( 'the function throws an error if not provided a supported file type', opts, function test( t ) {
	var values;
	var i;

	values = [
		[ 'js', 'dkafljdsa' ],
		[ 'js', 'sjxabc' ],
		[ 'beep', 'boop' ],
		[ 'f', 'js', 'lmy', 'yml' ]
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createTable( 'Apache-2.0', value );
		};
	}
});

tape( 'if provided an empty `types` argument, the function returns an empty object', opts, function test( t ) {
	var keys;
	var out;

	out = createTable( 'Apache-2.0', [] );
	keys = objectKeys( out );

	t.strictEqual( isObject( out ), true, 'returns an object' );
	t.strictEqual( keys.length, 0, 'is empty' );

	t.end();
});

tape( 'the function returns an object mapping file types to license header regular expressions', opts, function test( t ) {
	var keys;
	var out;
	var re;
	var i;

	out = createTable( 'Apache-2.0' );
	t.strictEqual( isObject( out ), true, 'returns an object' );

	keys = objectKeys( out );
	for ( i = 0; i < keys.length; i++ ) {
		re = out[ keys[ i ] ];
		t.strictEqual( isRegExp( re ), true, 'returns a regular expression for ' + keys[ i ] );
	}

	t.strictEqual( hasOwnProp( out, 'default' ), true, 'has `default` property' );
	t.end();
});

tape( 'the function returns an object mapping file types to license header regular expressions (file types)', opts, function test( t ) {
	var out;
	var re;
	var i;

	out = createTable( 'Apache-2.0', LANGS );
	t.strictEqual( isObject( out ), true, 'returns an object' );

	for ( i = 0; i < LANGS.length; i++ ) {
		re = out[ LANGS[ i ] ];
		t.strictEqual( isRegExp( re ), true, 'returns a regular expression for ' + LANGS[ i ] );
	}
	t.end();
});

tape( 'the license header regular expressions can be used to test for license headers', opts, function test( t ) {
	var table;
	var fpath;
	var fopts;
	var file;
	var keys;
	var re;
	var i;

	keys = objectKeys( FIXTURES );
	fopts = {
		'encoding': 'utf8'
	};

	table = createTable( 'Apache-2.0', LANGS );

	for ( i = 0; i < keys.length; i++ ) {
		// Read a fixture file:
		fpath = join( __dirname, 'fixtures', keys[ i ] );
		file = readFileSync( fpath, fopts );

		// Retrieve a regular expression:
		re = table[ FIXTURES[ keys[i] ] ];

		// Test that the regular expression positively validates:
		t.strictEqual( re.test( file ), true, 'positively validates (' + keys[ i ] + ')' );

		// Test that the regular expression negatively validates:
		t.strictEqual( re.test( 'beep boop bop' ), false, 'negatively validates (' + FIXTURES[ keys[i] ] + ')' );
	}
	t.end();
});
