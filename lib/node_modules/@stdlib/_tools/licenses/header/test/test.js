/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var objectKeys = require( '@stdlib/utils/keys' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var replace = require( '@stdlib/string/replace' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var licenseHeader = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': IS_BROWSER
};
var RE_COPYRIGHT = /Copyright \(c\) 2018 The Stdlib Authors\./;
var LANGS = {
	'AWK': 'awk',
	'awk': 'awk',
	'C': 'c',
	'c': 'c',
	'C++': 'cpp',
	'cpp': 'cpp',
	'CSS': 'css',
	'css': 'css',
	'Fortran': 'f',
	'f': 'f',
	'GYP': 'gyp',
	'gyp': 'gyp',
	'GYPI': 'gypi',
	'gypi': 'gypi',
	'h': 'h',
	'hpp': 'hpp',
	'HTML': 'html',
	'html': 'html',
	'INI': 'ini',
	'ini': 'ini',
	'Julia': 'jl',
	'jl': 'jl',
	'JavaScript': 'js',
	'js': 'js',
	'Markdown': 'md',
	'markdown': 'md',
	'md': 'md',
	'mdown': 'md',
	'Makefile': 'mk',
	'mk': 'mk',
	'make': 'mk',
	'Python': 'py',
	'py': 'py',
	'R': 'r',
	'shell': 'sh',
	'sh': 'sh',
	'bash': 'sh',
	'text': 'txt',
	'txt': 'txt',
	'wat': 'wat',
	'WAT': 'wat',
	'YAML': 'yml',
	'yml': 'yml'
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof licenseHeader, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a supported SPDX license identifier', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		'apache',
		'apache 2.0',
		'apache-2.0',
		'mit',
		'isc',
		'unlicense',
		'cc0',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			licenseHeader( value, 'js' );
		};
	}
});

tape( 'the function throws an error if not provided a supported SPDX license identifier (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		'apache',
		'apache 2.0',
		'apache-2.0',
		'aPaChE-2.0',
		'mit',
		'isc',
		'unlicense',
		'cc0',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			licenseHeader( value, 'js', {} );
		};
	}
});

tape( 'the function throws an error if not provided a file type argument which is a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			licenseHeader( 'Apache-2.0', value );
		};
	}
});

tape( 'the function throws an error if not provided a file type argument which is a string (options)', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			licenseHeader( 'Apache-2.0', value, {} );
		};
	}
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			licenseHeader( 'Apache-2.0', 'js', value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-5,
		0,
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'year': value
			};
			licenseHeader( 'Apache-2.0', 'js', opts );
		};
	}
});

tape( 'the function returns `null` if provided an unsupported file type', opts, function test( t ) {
	var out = licenseHeader( 'Apache-2.0', 'adkfljadlkfjas' );
	t.strictEqual( out, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns `null` if provided an unsupported file type (options)', opts, function test( t ) {
	var out = licenseHeader( 'Apache-2.0', 'adkfljadlkfjas', {} );
	t.strictEqual( out, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns a license header', opts, function test( t ) {
	var expected;
	var actual;
	var fpath;
	var fopts;
	var keys;
	var ext;
	var i;

	fopts = {
		'encoding': 'utf8'
	};
	keys = objectKeys( LANGS );
	for ( i = 0; i < keys.length; i++ ) {
		ext = LANGS[ keys[i] ];
		fpath = resolve( __dirname, '..', 'data', 'apache-2.0.'+ext+'.txt' );

		expected = readFile( fpath, fopts );
		actual = licenseHeader( 'Apache-2.0', keys[ i ] );

		t.strictEqual( actual, expected, 'returns expected value for ' + keys[ i ] );
	}
	t.end();
});

tape( 'the function returns a license header (options)', opts, function test( t ) {
	var expected;
	var actual;
	var fpath;
	var fopts;
	var opts;
	var keys;
	var ext;
	var i;

	opts = {
		'year': 2018,
		'copyright': 'The Stdlib Authors'
	};
	fopts = {
		'encoding': 'utf8'
	};
	keys = objectKeys( LANGS );
	for ( i = 0; i < keys.length; i++ ) {
		ext = LANGS[ keys[i] ];
		fpath = resolve( __dirname, '..', 'data', 'apache-2.0.'+ext+'.txt' );

		expected = readFile( fpath, fopts );
		expected = replace( expected, '{{YEAR}}', opts.year.toString() );
		expected = replace( expected, '{{COPYRIGHT_OWNER}}', opts.copyright );

		actual = licenseHeader( 'Apache-2.0', keys[ i ], opts );

		t.strictEqual( actual, expected, 'returns expected value for ' + keys[ i ] );
		t.strictEqual( RE_COPYRIGHT.test( actual ), true, 'contains expected copyright string' );
	}
	t.end();
});
