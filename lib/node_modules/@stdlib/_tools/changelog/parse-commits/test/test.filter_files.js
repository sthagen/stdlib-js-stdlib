/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var filterFiles = require( './../lib/filter_files.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof filterFiles, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function filters files based on excluded packages', function test( t ) {
	var expected;
	var exclude;
	var result;
	var files;

	files = [
		'lib/node_modules/@stdlib/math/base/special/abs/lib/index.js',
		'lib/node_modules/@stdlib/stats/base/dists/normal/pdf/lib/index.js',
		'lib/node_modules/@stdlib/utils/copy/lib/index.js'
	];
	exclude = [ 'stats/base/dists/normal/pdf' ];
	expected = [
		'lib/node_modules/@stdlib/math/base/special/abs/lib/index.js',
		'lib/node_modules/@stdlib/utils/copy/lib/index.js'
	];

	result = filterFiles( files, exclude );
	t.deepEqual( result, expected, 'returns expected value' );
	t.end();
});

tape( 'the function handles empty exclude list', function test( t ) {
	var expected;
	var exclude;
	var result;
	var files;

	files = [
		'lib/node_modules/@stdlib/math/base/special/abs/lib/index.js',
		'lib/node_modules/@stdlib/stats/base/dists/normal/pdf/lib/index.js'
	];
	exclude = [];
	expected = [
		'lib/node_modules/@stdlib/math/base/special/abs/lib/index.js',
		'lib/node_modules/@stdlib/stats/base/dists/normal/pdf/lib/index.js'
	];

	result = filterFiles( files, exclude );
	t.deepEqual( result, expected, 'returns expected value' );
	t.end();
});

tape( 'the function handles empty file list', function test( t ) {
	var expected;
	var exclude;
	var result;
	var files;

	files = [];
	exclude = [ 'math/base/special/abs' ];
	expected = [];

	result = filterFiles( files, exclude );
	t.deepEqual( result, expected, 'returns expected value' );
	t.end();
});

tape( 'the function correctly extracts package paths', function test( t ) {
	var expected;
	var exclude;
	var result;
	var files;

	files = [
		'lib/node_modules/@stdlib/complex/float64/base/assert/is-equal/lib/main.js',
		'lib/node_modules/@stdlib/math/base/special/abs/benchmark/benchmark.js',
		'lib/node_modules/@stdlib/stats/base/dists/normal/pdf/test/test.js',
		'lib/node_modules/@stdlib/utils/copy/examples/index.js'
	];
	exclude = [ 'complex/float64/base/assert/is-equal', 'stats/base/dists/normal/pdf' ];
	expected = [
		'lib/node_modules/@stdlib/math/base/special/abs/benchmark/benchmark.js',
		'lib/node_modules/@stdlib/utils/copy/examples/index.js'
	];

	result = filterFiles( files, exclude );
	t.deepEqual( result, expected, 'returns expected value' );
	t.end();
});

tape( 'the function correctly handles files without package subdirectories', function test( t ) {
	var expected;
	var exclude;
	var result;
	var files;

	files = [
		'lib/node_modules/@stdlib/math/package.json',
		'lib/node_modules/@stdlib/stats/package.json'
	];
	exclude = [ 'stats' ];
	expected = [
		'lib/node_modules/@stdlib/math/package.json'
	];

	result = filterFiles( files, exclude );
	t.deepEqual( result, expected, 'returns expected value' );
	t.end();
});
