/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/array/base/assert/contains' );
var replace = require( '@stdlib/string/base/replace' );
var filter = require( '@stdlib/array/base/filter' );


// VARIABLES //

var RE_STDLIB_PREFIX = /^lib\/node_modules\/@stdlib\//;


// FUNCTIONS //

/**
* Extracts a package path from a file path.
*
* @private
* @param {string} filepath - input file path to process
* @returns {string} package path
*
* @example
* var path = 'lib/node_modules/@stdlib/complex/float64/base/assert/is-equal/lib/main.js';
* var result = extractPackage( path );
* // returns 'complex/float64/base/assert/is-equal'
*/
function extractPackage( filepath ) {
	var parts;
	var idx;
	var i;

	filepath = replace( filepath, RE_STDLIB_PREFIX, '' );
	parts = filepath.split( '/' );

	// Remove the last part as it's a file name:
	parts.pop();

	// Find the index of the first occurrence of certain package subdirectories:
	idx = -1;
	for ( i = 0; i < parts.length; i++ ) {
		if (
			parts[ i ] === 'bin' ||
			parts[ i ] === 'benchmark' ||
			parts[ i ] === 'data' ||
			parts[ i ] === 'docs' ||
			parts[ i ] === 'etc' ||
			parts[ i ] === 'examples' ||
			parts[ i ] === 'include' ||
			parts[ i ] === 'lib' ||
			parts[ i ] === 'scripts' ||
			parts[ i ] === 'src' ||
			parts[ i ] === 'test'
		) {
			idx = i;
			break;
		}
	}

	// If we found a package subdirectory, return the package path up to that point:
	if ( idx !== -1 ) {
		parts.length = idx;
	}
	return parts.join( '/' );
}


// MAIN //

/**
* Filters files based on a list of packages to exclude.
*
* @private
* @param {Array} files - list of files
* @param {Array} exclude - list of packages to exclude
* @returns {Array} filtered files
*
* @example
* var files = [
*     'lib/node_modules/@stdlib/stats/base/dists/normal/pdf/test/test.js',
*     'lib/node_modules/@stdlib/utils/copy/examples/index.js'
* ];
* var exclude = [ 'stats/base/dists/normal/pdf' ];
* var out = filterFiles( files, exclude );
* // returns [ 'lib/node_modules/@stdlib/utils/copy/examples/index.js' ]
*/
function filterFiles( files, exclude ) {
	return filter( files, predicate );

	/**
	* Predicate function.
	*
	* @private
	* @param {string} file - file path
	* @returns {boolean} boolean indicating whether to include a file
	*/
	function predicate( file ) {
		return !contains( exclude, extractPackage( file ) );
	}
}


// EXPORTS //

module.exports = filterFiles;
