/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var join = require( 'path' ).join;
var mkdirp = require( 'mkdirp' ).sync;
var collapse = require( 'bundle-collapser/plugin' );
var uglifyify = require( 'uglifyify' );
var uglify = require( 'uglify-js' );
var packFlat = require( 'browser-pack-flat/plugin' );
var pkgNames = require( '@stdlib/_tools/pkgs/names' ).sync;
var instanceOf = require( '@stdlib/assert/instance-of' );
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var bundle = require( './../../lib' );

// Define package resolution options:
var fopts1 = {
	'pattern': '**/package.json',
	'ignore': [
		'**/_**/**',     // ignore "private" packages
		'**/datasets/**' // ignore dataset packages
	]
};

var fopts2 = {
	'pattern': '**/datasets/**/package.json', // only dataset packages
	'ignore': [
		'**/_**/**'      // ignore "private" packages
	]
};

// Resolve packages:
var names1 = pkgNames( fopts1 );
if ( instanceOf( names1, Error ) ) {
	throw names1;
}
var names2 = pkgNames( fopts2 );
if ( instanceOf( names2, Error ) ) {
	throw names2;
}

// Create an output build directory:
var dir = join( __dirname, 'build' );
mkdirp( dir );

// Define bundle options:
var uopts = {
	'global': true
};

var bopts1 = {
	'namespace': 'flat',
	'exportName': '@stdlib',
	'plugins': [
		packFlat             // bundle under a single scope
	],
	'external': names2       // omit datasets packages from the main bundle
};

var bopts2 = {
	'namespace': 'none',
	'exportName': '@stdlib/datasets',
	'transforms': [
		[ uglifyify, uopts ] // minify modules individually
	],
	'plugins': [
		collapse             // convert bundle paths to IDs
	]
};

// Generate bundles:
bundle( names1, bopts1, onBundle1 );
bundle( names2, bopts2, onBundle2 );

function onBundle1( error, bundle ) {
	var fpath;
	if ( error ) {
		throw error;
	}
	fpath = join( dir, 'bundle.js' );
	writeFile( fpath, bundle );

	bundle = uglify.minify( bundle.toString() );

	fpath = join( dir, 'bundle.min.js' );
	writeFile( fpath, bundle.code );
}

function onBundle2( error, bundle ) {
	var fpath;
	if ( error ) {
		throw error;
	}
	fpath = join( dir, 'datasets.min.js' );
	writeFile( fpath, bundle );
}
